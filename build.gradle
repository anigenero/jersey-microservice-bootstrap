buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
    }
    dependencies {
        classpath 'org.junit.platform:junit-platform-gradle-plugin:1.1.0'
        classpath 'org.hibernate.build.gradle:gradle-maven-publish-auth:2.0.1'
        classpath 'net.linguica.gradle:maven-settings-plugin:0.5'
        classpath 'com.benjaminsproule:swagger-gradle-plugin:+'
    }
}

plugins {
    id 'org.sonarqube' version '2.5'
}

apply plugin: 'idea'
apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'maven-publish-auth'
apply plugin: 'net.linguica.maven-settings'
apply plugin: 'org.junit.platform.gradle.plugin'
apply plugin: 'com.benjaminsproule.swagger'

repositories {
    mavenCentral()
    mavenLocal()
}

group 'com.anigenero'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

ext {

    tomcatVersion = '9.0.1'

    cdiVersion = '2.0'

    jacksonVersion = '2.8.+'
    jerseyExtVersion = '2.26'
    hibernateVersion = '5.2.10.Final'
    log4jVersion = '2.8.+'
    swaggerVersion = '1.5.16'

    assertJVersion = '3.8.+'
    junitVersion = '5.1.+'
    mockitoVersion = '2.7.22'

}

dependencies {

    compileOnly group: 'org.apache.tomcat', name: 'tomcat-servlet-api', version: tomcatVersion

    compileOnly group: 'javax.enterprise', name: 'cdi-api', version: cdiVersion
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: log4jVersion

    compile 'javax.ws.rs:javax.ws.rs-api:2.1@jar'
    compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
    compile(group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: jerseyExtVersion) {
        exclude group: 'javax.ws.rs'
    }
    compile(group: 'org.glassfish.jersey.media', name: 'jersey-media-json-jackson', version: jerseyExtVersion){
        exclude group: 'javax.ws.rs'
    }
    compile(group: 'org.glassfish.jersey.media', name: 'jersey-media-multipart', version: jerseyExtVersion) {
        exclude group: 'javax.ws.rs'
    }
    compile(group: 'org.glassfish.jersey.ext', name: 'jersey-declarative-linking', version: jerseyExtVersion) {
        exclude group: 'javax.ws.rs'
    }
    compile(group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: jerseyExtVersion) {
        exclude group: 'javax.ws.rs'
    }
    compile(group: 'org.glassfish.jersey.ext.cdi', name: 'jersey-cdi1x-servlet', version: jerseyExtVersion) {
        exclude group: 'javax.ws.rs'
    }
    compile(group: 'org.glassfish.jersey.ext', name: 'jersey-bean-validation', version: jerseyExtVersion) {
        exclude group: 'javax.ws.rs'
        exclude group: 'org.hibernate'
    }

    compile group: 'org.springframework.data', name: 'spring-data-commons', version: '1.11.6.RELEASE'

    compile group: 'org.hibernate', name: 'hibernate-validator', version: '5.4.1.Final'

    compile group: 'io.swagger', name: 'swagger-core', version: swaggerVersion
    compile group: 'io.swagger', name: 'swagger-annotations', version: swaggerVersion
    compileClasspath group: 'io.swagger', name: 'swagger-hibernate-validations', version: swaggerVersion

    testCompile group: 'org.apache.tomcat', name: 'tomcat-servlet-api', version: tomcatVersion

    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitVersion
    testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitVersion

    testCompile group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
    testCompile group: 'org.assertj', name: 'assertj-core', version: assertJVersion

}

def junitPlatformTestTask = (JavaExec) project.tasks.getByName('junitPlatformTest')

jacoco {
    applyTo(junitPlatformTestTask)
    toolVersion = '0.8.0'
}

test {
    jacoco {
        excludes = ['**/Test*']
        append = false
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
    }
}

sonarqube {
    properties {
        property "sonar.junit.reportPath", file("build/test-results")
        property "sonar.jacoco.reportPaths", file("build/jacoco/junitPlatformTest.exec")
    }
}

project.task(type: JacocoReport, "jacocoJupTestReport") {

    executionData(junitPlatformTestTask)
    sourceSets(sourceSets.main)

    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)

    reports {
        html.destination "${buildDir}/jacoco/html"
    }

}

project.task(type: JacocoCoverageVerification, "jacocoTestVerify") {

    executionData(junitPlatformTestTask)

    sourceDirectories = files(sourceSets.main.allSource.srcDirs)
    classDirectories = files(sourceSets.main.output)

    violationRules {
        rule {
            limit {
                minimum = 0.9
            }
        }
    }

}

check.dependsOn jacocoJupTestReport